================================================
============2014、12、17：周三++=================
================================================
首先总结一下周一周二的工作：
  一、 周一周二的大部分时间用来完成应用系统设计的课后作业了。
    (1)printf("The Correct result is :%s\n", strcat((char *)pHList_str_fst + 4, (char *)pHList_str_scd + 4));
     因为这行代码(提示信息操纵了测试用例),让我误以为代码出现了Bug了，复制了第二个字符串两次，Degbug了整整一天。
    (2)free()字符串出错,因为strcat()字符串拼接使得内存溢出，释放时出错。
    (3)讲一个指针的声明用const“预先固定”,将使那个对象而不是使这个指针成为常量，要使指针本身成为常量，必须在声
    明时使用*const;例如:char *const pName = sName;
================================================
============2014、12、18：周四++=================
================================================
  一、学习到了一个C++11版本随机数验证码的生成
  // 引入随机数引擎和分布所在的头文件
#include <random>
#include <iostream>

// 使用std名字空间
using namespace std;

int main()
{
        // 定义一个默认的随机数引擎
        default_random_engine reng; 
        // 构建一个从0到25之间的平均分布
        uniform_int_distribution<int>  uni_dist(0,25); 
        
        // 使用random_device设置随机数引擎的种子，
        // 以防止每次运行都产生相同的伪随机数序列
        random_device  rnd_device; 
        reng.seed(rnd_device());  

        // 验证码一共4位
        const int n = 4;    
        char code[n]; // 保存验证码的字符数组
        // 提示输入验证码
        cout<<"请输入下面的验证码："<<endl;
        // 利用for循环产生4个验证码字母字符
        for (int i = 0; i < n; ++i)
        {
             // uni_dist(reng)表示让reng引擎按照uni_dist分布，
             // 产生取值在0到25之间呈平均分布的随机数
             // 然后在‘A’的基础上向后偏移，就得到了随机的验证码字母字符
             code[i] = 'A' + uni_dist(reng); 

             // 输出验证码字母字符
             cout<<code[i];
         }

         // …
                    
         return 0;
}
  二、学习到斯坦福大学编程范例公开课作业5第一问的内容，并写成了博客，地址为：
      http://blog.csdn.net/yums467/article/details/42005923
      

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
