================================================
============2014、12、17：周三++=================
================================================
首先总结一下周一周二的工作：
  一、 周一周二的大部分时间用来完成应用系统设计的课后作业了。
    (1)printf("The Correct result is :%s\n", strcat((char *)pHList_str_fst + 4, (char *)pHList_str_scd + 4));
     因为这行代码(提示信息操纵了测试用例),让我误以为代码出现了Bug了，复制了第二个字符串两次，Degbug了整整一天。
    (2)free()字符串出错,因为strcat()字符串拼接使得内存溢出，释放时出错。
    (3)讲一个指针的声明用const“预先固定”,将使那个对象而不是使这个指针成为常量，要使指针本身成为常量，必须在声
    明时使用*const;例如:char *const pName = sName;
================================================
============2014、12、18：周四++=================
================================================
  一、学习到了一个C++11版本随机数验证码的生成
  // 引入随机数引擎和分布所在的头文件
#include <random>
#include <iostream>

// 使用std名字空间
using namespace std;

int main()
{
        // 定义一个默认的随机数引擎
        default_random_engine reng; 
        // 构建一个从0到25之间的平均分布
        uniform_int_distribution<int>  uni_dist(0,25); 
        
        // 使用random_device设置随机数引擎的种子，
        // 以防止每次运行都产生相同的伪随机数序列
        random_device  rnd_device; 
        reng.seed(rnd_device());  

        // 验证码一共4位
        const int n = 4;    
        char code[n]; // 保存验证码的字符数组
        // 提示输入验证码
        cout<<"请输入下面的验证码："<<endl;
        // 利用for循环产生4个验证码字母字符
        for (int i = 0; i < n; ++i)
        {
             // uni_dist(reng)表示让reng引擎按照uni_dist分布，
             // 产生取值在0到25之间呈平均分布的随机数
             // 然后在‘A’的基础上向后偏移，就得到了随机的验证码字母字符
             code[i] = 'A' + uni_dist(reng); 

             // 输出验证码字母字符
             cout<<code[i];
         }

         // …
                    
         return 0;
}
  二、学习到斯坦福大学编程范例公开课作业5第一问的内容，并写成了博客，地址为：
      http://blog.csdn.net/yums467/article/details/42005923
================================================
============2014、12、19：周五++=================
================================================
一、找到了泛型栈的Bug,出错位置在参数copy处，传递的应该是copy参数的地址，而不
是copy参数本身，虽然copy本身也是指针。
二、看完了CPLS的第五章。
三、完结了HTML的学习工作，也完成了测验。
================================================
============2014、12、20：周六++=================
================================================
考六级啦！！！其他啥也没有干。。。。。。。。。。。。
================================================
============2014、12、21：周日++=================
================================================
一、听完了朗讯杯的历年题型讲解。
动态规划跟分治法，
高级组的AI题为走迷宫,github地址如下：
https://github.com/simonmysun/AICLASH
二、完成了CPLS第四章的课后题作业，即将要解决第五章的，第五章习题做到了第五题，
字符串的长度通常不考虑后面的'\0'；字符数组的大小要注意加上'\0'。strlen()函数
在计算字符串长度的时候并没有加上'\0'.
三、看完了知乎上你好CPP专栏的第十个文章，学习到了wchar_t表示中文的方式:
#pragma once
#pragma execution_character_set("utf-8")
//强制无签名utf-8

#include <iostream>
using namespace std;

int main()
{
	// 定义一个wchar_t类型字符变量
	// 并用一个中文字符对其赋值，注意赋值的方式L''
	wchar_t cChs = L'曾';
	// 设置wcout输出对象的区域并输出中文字符
	wcout.imbue(locale("chs"));
	wcout << cChs << endl;

	return 0;
}
代码开头的两句话是设置文件格式为utf-8,具体实现方式为:
https://social.msdn.microsoft.com/Forums/zh-CN/4f5faef2-4e4d-4a42-b199-400f9fd43e5e/vs2013utf8?forum=visualcpluszhchs

我知道了，改"Microsoft Visual Studio 12.0\VC\vcprojectitems"目录下的“newc++file.cpp”和“hfile.h”文件。在里边加入类似于：

#pragma once
#pragma execution_character_set("utf-8")
//强制无签名utf-8

这样的有中文或者其他多字符编码的句子，然后另存为65001的utf-8无签名就OK了。
四、完成了C语言实现泛型栈，解决了历史遗留问题。具体地址等博客审核通过后再贴上来。
http://blog.csdn.net/yums467/article/details/41891357
五、完成了”M^N %1003“"回文数"复习了递归的第一个题目寻找组合个数，复习了平衡二叉树的构造过程，理解了很久之前没理解的算法
思想，若向平衡二叉树中插入一个新结点后破坏了平衡二叉树的平衡性。首先要找出插入新结点后失去平衡的最小子树根结点的指针。
然后再调整这个子树中有关结点之间的链接关系，使之成为新的平衡子树。
当失去平衡的最小子树被调整为平衡子树后，原有其他所有不平衡子树无需调整，整个二叉排序树就又成为一棵平衡二叉树。
（最小子树的概念）。
XHTML看到XHTML 标准属性，做到padding.
================================================
============2014、12、22：周一++=================
================================================
一、上午上英语课了。
二、中午十二点半开始看CPLS，看到6.1.6
看完了《你好Cpp》的第11章。
auto和decltype的作用有些相似，都可以推断某个表达式的具体数据类型。但是，两者的使用还是稍有差别。如果我们仅仅是想根据初始值确定 
一个变量合适的数据类型，那么auto是最佳人选。而只有当我们需要推断某个表达式的数据类型，并将其作为一种新的数据类型重复使用
（比如，定义多个相同类型变量）或者单独使用（比如，作为函数的返回值类型）时，我们才真正需要用到decltype。
三、递归方面看完，但是01背包问题的具体实现还是没有找到一个比较标准的程序。回溯法看到第三页，实现了回溯法求排列的代。
四、完结了XHTML，开始了CSS之旅，看完了CSS第一章。
================================================
============2014、12、23：周二++=================
================================================    
一、上完看完了回溯法的填字游戏问题，下午听报告去了。
二、晚上大体看了一下AIClash的题目要求，看完了贪心法装箱问题。
三、CPLS看到运算符综述了，Make a Website 看到CSS Styling.
   CSSp派生选择器看完。
================================================
============2014、12、24：周三++=================
================================================
平安夜：
一、上午赶集上机器学习的课程了。
二、下午看完了第六章贪心算法。
三、晚上看了一下AIClash的指导。
四、第七章分治法看了第一个案例。CSS 属性选择器
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
